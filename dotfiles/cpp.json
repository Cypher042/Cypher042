
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

{"defaulty" : {
  "prefix": "uwu",
  "body": [
    "#include<bits/stdc++.h>",
    "",
    "using namespace std;",
    "",
    "#define int long long",
    "#define YES cout<<\"YES\"<<'\\n'",
    "#define NO cout<<\"NO<<'\\n'",
    "#define endl '\\n'",
    "#define fastIO() ios_base::sync_with_stdio(false);cin.tie(NULL);",
    "",
    "",
    "",
    "void solve(){",
    "",
    "\t$1",
    "    ",
    "}",
    "int32_t main(){",
    "",
    "    fastIO();",
    "    int t;",
    "    cin>>t;",
    "    // t =1; ",
    "",
    "    while(t--){",
    "        solve();",
    "    }",
    "    return 0;",
    "}"
  ],
  "description": ""
},

"Binary Exponentiation": {
  "prefix": "powerbin",
  "body": [
    "long long binpow(long long a, long long b, long long m) {",
    "    a %= m;",
    "    long long res = 1;",
    "    while (b > 0) {",
    "        if (b & 1)",
    "            res = res * a % m;",
    "        a = a * a % m;",
    "        b >>= 1;",
    "    }",
    "    return res;",
    "}"
  ],
  "description": ""
},

"Taking input in a vector": {
  "prefix": "inputvector",
  "body": [
    "vector<int> v;",
    "for(int i=0; i<n;i++){",
    "  int x; cin>>x;",
    "  v.push_back(x);",
    "}"
  ],
  "description": ""
}
}
